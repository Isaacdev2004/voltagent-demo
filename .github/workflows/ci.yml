name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Node.js dependencies
      working-directory: ./services/node-service
      run: npm install

    - name: Install Python dependencies
      working-directory: ./services/fastapi-service
      run: |
        pip install -r requirements.txt

    - name: Build Node.js service
      working-directory: ./services/node-service
      run: npm run build

    - name: Test Node.js service
      working-directory: ./services/node-service
      run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker build -t voltagent-fastapi ./services/fastapi-service
        docker build -t voltagent-node ./services/node-service

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'voltagent-fastapi'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        echo "API_KEY=test-api-key-12345" > .env
        echo "NODE_PORT_DEMO=3001" >> .env
        echo "NODE_PORT_CUSTOM=3002" >> .env
        echo "FASTAPI_PORT=8000" >> .env

    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30

    - name: Test health endpoints
      run: |
        curl -f http://localhost:8000/ping
        curl -f http://localhost:3001/health
        curl -f http://localhost:3002/health

    - name: Test /run endpoint
      run: |
        curl -f -X POST http://localhost:3002/run \
          -H "Content-Type: application/json" \
          -H "X-Request-ID: test-request-123" \
          -d '{"prompt": "Test prompt", "max_tokens": 50}'

    - name: Cleanup
      if: always()
      run: docker-compose down -v

  artifact:
    runs-on: ubuntu-latest
    needs: [test, build, integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifact
      run: |
        zip -r voltagent-demo-deployment.zip \
          services/ \
          docker-compose.yml \
          .env.example \
          README.md

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: voltagent-demo-deployment
        path: voltagent-demo-deployment.zip
        retention-days: 30