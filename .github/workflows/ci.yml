name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: services/node-service/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Node.js dependencies
      working-directory: ./services/node-service
      run: npm ci

    - name: Install Python dependencies
      working-directory: ./services/fastapi-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: Lint Node.js code
      working-directory: ./services/node-service
      run: npm run lint

    - name: Lint Python code
      working-directory: ./services/fastapi-service
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Build Node.js service
      working-directory: ./services/node-service
      run: npm run build

    - name: Test Node.js service
      working-directory: ./services/node-service
      run: npm test
      continue-on-error: true

    - name: Test Python service
      working-directory: ./services/fastapi-service
      run: |
        python -m pytest --tb=short
      continue-on-error: true

  build-and-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build FastAPI service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/fastapi-service
        push: false
        tags: voltagent-fastapi:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Node.js service image
      uses: docker/build-push-action@v5
      with:
        context: ./services/node-service
        push: false
        tags: voltagent-node:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on FastAPI image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'voltagent-fastapi:latest'
        format: 'sarif'
        output: 'trivy-results-fastapi.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner on Node.js image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'voltagent-node:latest'
        format: 'sarif'
        output: 'trivy-results-node.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-fastapi.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-node.sarif'

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        echo "API_KEY=test-api-key-12345" > .env
        echo "NODE_PORT_DEMO=3001" >> .env
        echo "NODE_PORT_CUSTOM=3002" >> .env
        echo "FASTAPI_PORT=8000" >> .env

    - name: Create logs directory
      run: mkdir -p logs/fastapi logs/agent-demo logs/agent-custom

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        sleep 30

    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'

    - name: Test FastAPI service health
      run: |
        curl -f http://localhost:8000/ping || exit 1

    - name: Test Node.js demo service health
      run: |
        curl -f http://localhost:3001/health || exit 1

    - name: Test Node.js custom service health
      run: |
        curl -f http://localhost:3002/health || exit 1

    - name: Test completions endpoint
      run: |
        curl -f -X POST http://localhost:8000/completions \
          -H "Content-Type: application/json" \
          -H "X-API-Key: test-api-key-12345" \
          -d '{"prompt": "Hello, world!", "max_tokens": 50}' || exit 1

    - name: Test agent demo endpoint
      run: |
        curl -f -X POST http://localhost:3001/agent/demo \
          -H "Content-Type: application/json" \
          -d '{"message": "Test message"}' || exit 1

    - name: Test agent custom /run endpoint
      run: |
        curl -f -X POST http://localhost:3002/run \
          -H "Content-Type: application/json" \
          -H "X-Request-ID: test-request-123" \
          -d '{"prompt": "Test prompt", "max_tokens": 50}' || exit 1

    - name: Check service logs
      if: failure()
      run: |
        echo "=== FastAPI Service Logs ==="
        docker-compose logs fastapi-service
        echo "=== Agent Demo Service Logs ==="
        docker-compose logs agent-demo
        echo "=== Agent Custom Service Logs ==="
        docker-compose logs agent-custom

    - name: Stop services
      if: always()
      run: docker-compose down -v

  create-artifact:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-scan, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifact
      run: |
        # Create a deployment ZIP with all necessary files
        zip -r voltagent-demo-deployment.zip \
          services/ \
          docker-compose.yml \
          .env.example \
          README.md \
          monitoring/ \
          scripts/ \
          .github/workflows/ci.yml

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: voltagent-demo-deployment
        path: voltagent-demo-deployment.zip
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-and-scan, integration-test, create-artifact]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v4
      with:
        name: voltagent-demo-deployment

    - name: Deploy to staging
      run: |
        echo "Deployment to staging would happen here"
        echo "This could include:"
        echo "- Pushing images to container registry"
        echo "- Updating Kubernetes manifests"
        echo "- Running database migrations"
        echo "- Updating load balancer configuration"
