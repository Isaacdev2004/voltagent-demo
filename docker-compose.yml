version: '3.8'

services:
  # FastAPI Gateway Service
  fastapi-service:
    build:
      context: ./services/fastapi-service
      dockerfile: Dockerfile
    container_name: voltagent-fastapi
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    environment:
      - API_KEY=${API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./logs/fastapi:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voltagent-network
    restart: unless-stopped

  # Node.js Demo Agent Service
  agent-demo:
    build:
      context: ./services/node-service
      dockerfile: Dockerfile
    container_name: voltagent-agent-demo
    ports:
      - "${NODE_PORT_DEMO:-3001}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_KEY=${API_KEY}
      - FASTAPI_URL=http://fastapi-service:8000
      - LOG_LEVEL=info
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./logs/agent-demo:/app/logs
    depends_on:
      fastapi-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voltagent-network
    restart: unless-stopped

  # Node.js Custom Agent Service
  agent-custom:
    build:
      context: ./services/node-service
      dockerfile: Dockerfile
    container_name: voltagent-agent-custom
    ports:
      - "${NODE_PORT_CUSTOM:-3002}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_KEY=${API_KEY}
      - FASTAPI_URL=http://fastapi-service:8000
      - LOG_LEVEL=info
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./logs/agent-custom:/app/logs
    depends_on:
      fastapi-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voltagent-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: voltagent-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - voltagent-network
    restart: unless-stopped

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: voltagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - voltagent-network
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: voltagent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - voltagent-network
    restart: unless-stopped

volumes:
  grafana-storage:

networks:
  voltagent-network:
    driver: bridge
